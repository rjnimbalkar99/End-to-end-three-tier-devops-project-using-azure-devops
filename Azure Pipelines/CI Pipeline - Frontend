trigger:
  branches:
    include:
      - main

  paths:
    include: 
      - ./Application-Code/Frontend
   
pool:
  name: default
  demands:
    - agent.name -equals Agent-1

variables:
  - group: Three-tier-app-frontend

stages:
  - stage: 'SonarQube_Analysis'
    jobs:
      - job:
        displayName: 'Static_code_analysis'
        steps:
        - script: sudo apt update && sudo apt install unzip -y
          displayName: 'Install unzip'
        - task: SonarQubePrepare@7
          inputs:
            SonarQube: 'Sonarqube-server'
            scannerMode: 'cli'
            cliScannerVersion: '7.0.2.4839'
            configMode: 'manual'
            cliProjectKey: '$(SONAR_PROJECT_KEY)'
            cliProjectName: 'Three-tier-app-frontend'
            cliSources: './Application-Code/Frontend'

        - task: SonarQubeAnalyze@7
          inputs:
            jdkversion: 'JAVA_HOME_17_X64'

        - task: SonarQubePublish@7
          inputs:
            pollingTimeoutSec: '300'

  - stage: Quality_Gate
    jobs:
      - job: Check_Quality_Gate
        displayName: "Check SonarQube Quality Gate"
        steps:
          - script: |
              curl -u $(SONAR_TOKEN): $(SONAR_HOST_URL)/api/qualitygates/project_status?projectKey=$(SONAR_PROJECT_KEY)

  - stage: 'Dependancy_check'
    jobs:
      - job:
        displayName: 'OWASP_Dependancy_Check'
        steps:
          - task: dependency-check-build-task@6
            inputs:
              projectName: 'Three-tier-app-frontend'
              scanPath: './Application-Code/Frontend'
              format: 'XML'
              uploadReports: false
  
  - stage: 'Trivy_File_Scan'
    jobs:
      - job:
        displayName: 'Trivy_filesystem_scanning'
        steps:            
          - task: trivy@1
            inputs:
              trivyImage: 'aquasec/trivy:latest'
              version: 'latest'
              exitCode: '0'
              debug: true
              type: 'filesystem'
              path: './Application-Code/Frontend'
              severities: 'MEDIUM'
              ignoreUnfixed: true
              tableOutput: true

  - stage: 'Docker_Build'
    jobs:
      - job:
        displayName: 'Building_docker_image'
        steps:
          - script: |
              cd ./Application-Code/Frontend
              docker system prune -f 
              docker system container prune -f 
              docker build -t frontend:$(Build.BuildID) .

  - stage: 'Push_TO_ACR'
    jobs:
      - job:
        displayName: 'Pushing_image_to_ACR'
        steps:            
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'Terraform-client'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az acr login --name $(AZURE_CONTAINER_REGISTRY)
              docker tag frontend:$(Build.BuildID)  $(AZURE_CONTAINER_REGISTRY).azurecr.io/$(AZURE_ACR_REPO_NAME):$(Build.BuildID) 
              docker push  $(AZURE_CONTAINER_REGISTRY).azurecr.io/$(AZURE_ACR_REPO_NAME):$(Build.BuildID)

  - stage: 'Trivy_Image_Scan'
    jobs:
      - job: 
        displayName: 'Scanning_docker_image'
        steps:
        - task: trivy@1
          inputs:
            version: 'latest'
            exitCode: '0'
            debug: true
            image: '$(AZURE_CONTAINER_REGISTRY).azurecr.io/$(AZURE_ACR_REPO_NAME):$(Build.BuildID)'
            severities: 'MEDIUM'
            ignoreUnfixed: true
            tableOutput: true
  
  - stage: 'Updating_Deployment_File'
    jobs:
      - job: 
        displayName: 'Update_Deployment_Manifest_in_Azure_Repo'
        steps:
          - checkout: Self
            persistCredentials: true
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          - script: | 
              git config user.name $(GIT_USERNAME)
              git config user.email $(GIT_EMAILID)

              #To update the K8S deployment file
              cd ./Helm/Three-tier-app-chart
              sed -i 's/\(frontend:\s*[^#]*tag:\s*\).*/\1"$(Build.BuildID)"/' values.yaml
              git add deployment.yaml
              git commit -m "Update values.yaml Image to version $(Build.BuildID)"

              #To push the chnages to Azure repo
              git push https://$(System.AccessToken)@dev.azure.com/rjnimbalkar321/Demo/_git/End-to-end-three-tier-devops-project-using-azure-devops HEAD:main

